 ;
; Copyright (c) 2021 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program resistor_dac_2bit

; Drive the 2 outputs ST and Ckl according what is 
.side_set 2 opt
    pull            side 0b00
    out x, 16                       ; we get the capture length from the lower half
    out y, 16                       ; we get the ST pulse lenth from the upper half
ide1: 
    set pins, 0b11
    jmp Y-- ide1     side 0b01
    irq 0            side 0b00      ; signaling, we are done with ST pulse
ide2:
    set pins, 0b10
    jmp X-- ide2     side 0b00
    irq 1            side 0b00      ; signaling, we finished capturing






% c-sdk {
#include "hardware/clocks.h"
static inline void resistor_dac_2bit_program_init(PIO pio, uint sm, uint offset,
        uint sample_rate_hz, uint pin_base) {

    pio_sm_set_pins_with_mask(pio, sm, 0, 0x1fu << pin_base);
    pio_sm_set_pindirs_with_mask(pio, sm, ~0u, 0x1fu << pin_base);
    for (int i = 0; i < 2; ++i)
        pio_gpio_init(pio, pin_base + i);
    pio_sm_config c = resistor_dac_2bit_program_get_default_config(offset);
    sm_config_set_set_pins(&c,pin_base,2);
    sm_config_set_sideset_pins(&c, pin_base);
    sm_config_set_out_pins(&c, pin_base, 2);
    // Shift to right, autopull threshold 32
    sm_config_set_out_shift(&c, true, false, 32);
    // Deeper FIFO as we're not doing any RX
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    float div = (float)clock_get_hz(clk_sys) / sample_rate_hz;
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
